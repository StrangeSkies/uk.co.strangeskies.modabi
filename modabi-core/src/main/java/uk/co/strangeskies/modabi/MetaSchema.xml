<?xml version="1.1"?>
<modelSchema xmlns="modabi.strangeskies.co.uk" namespace="modabi.strangeskies.co.uk">

	<root id="modelSchema" bindingClass=".SchemaGraph" builderClass=".SchemaGraphBuilder">
		<property id="namespace" inMethod="namespace" outMethod="getNamespace"
			optional="true" /> <!-- The namespace this schema belongs to. -->

		<binding id="root" model="model" occurences="1" />

		<binding id="dependencies" occurences="0..1">
			<binding model="dependency" bindingClass=".SchemaGraph" occurences="0.." />
		</binding>

		<binding id="types" occurences="0..1">
			<binding id="type" model="type" occurences="0.." outIterator="getTypes" />
		</binding>

		<binding id="models" occurences="0..1">
			<binding id="model" model="model" occurences="0.." />
		</binding>
	</root>

	<dependencies>
		<dependency id="baseSchema" namespace="modabi.strangeskies.co.uk" />
	</dependencies>

	<models>
		<model id="type" bindingClass=".node.data.DataType">
			<property id="id" />
			<property id="dataClass" type="class" />
			<choice>

			</choice>
		</model>

		<model id="node" bindingClass=".node.SchemaNode" abstract="true" />

		<model id="input" model="node" bindingClass=".node.InputNode">
			<property id="inMethod" optional="true" />
			<property id="inMethodChain" optional="true" type="boolean" />
			<property id="inMethodNest" optional="true" type="boolean" />
		</model>

		<model id="output" model="node" bindingClass=".node.OutputNode">
			<property id="outMethod" optional="true" />
			<property id="iterable" type="boolean" optional="true" />
		</model>

		<model id="branch" model="node" bindingClass=".node.BranchingNode">
			<binding id="child" inMethod="addChild" model="node" occurences="0.." />
		</model>

		<model id="choice" model="branch, input" bindingClass=".node.choiceNode"
			builderClass=".node.builder.choiceNodeBuilder" abstract="false">
			<property id="mandatory" type="boolean" />
			<binding id="child" occurences="2.." />
		</model>

		<model id="sequence" model="branch, input" bindingClass=".node.SequenceNode"
			builderClass=".node.builder.SequenceNodeBuilder" abstract="false">
		</model>

		<model id="model" model="branch" bindingClass=".node.BindingNode"
			builderClass=".node.builder.BindingNodeBuilder">
			<property id="id" />
			<property id="abstract" type="boolean" />
			<property id="model" type="reference" optional="true" />
			<property id="bindingClass" type="class" optional="true" />
			<choice>
				<sequence />
				<sequence>
					<property id="builderClass" type="class" />
					<property id="builderMethod" optional="true" />
				</sequence>
			</choice>
		</model>

		<model id="binding" model="model, input, output" abstract="false">
			<property id="occurances" type="integerRange" optional="true" />
		</model>

		<model id="data" model="node, input" abstract="false" bindingClass=".node.DataNode"
			builderClass="node.builder.DataNodeBuilder">
			<property id="type" />
			<property id="optional" optional="true" type="boolean" />
			<data optional="true" />
		</model>

		<model id="property" model="data" bindingClass=".node.PropertyNode"
			builderClass="node.builder.PropertyNodeBuilder">
			<property id="id" />
		</model>
	</models>

</modelSchema>
